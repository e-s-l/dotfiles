#! /usr/bin/env bash

# load_dots:
# create soft links from files in dotfiles directory
# to create configuration locations

# assess whether on linux and mac
# and load dotfiles appropriately
# also check corresponding applications are installed

# assumes all config files are stored like $PWD/<program_name>/config.file
# tho the paths must be specified in the associative array(s) defined below

# options are: 
# install (create backups of existing files and then symlinks), or
# load (copy non-extant only)
# uninstall (remove all links)
# clean: delete broken
# backup: copy all to specfic backup directory

# for the moment applications will be saved here
# but in future should be read from configuration file

# heavily inspired by
# https://github.com/okubax/dotfiles/blob/master/dotfiles.sh

# NOTE
# we use associative arrays and therefore require bash v4 (or higher)
# this is not the default on mac
# so check your bash version
# or use homebrew, and hope it's already on your path

##############

### TODO
# check corresponding program exists

# prelims

# some paths
config_dir="$HOME/.config"
backup_dir="$HOME/.dotfiles.bak"

# some flags

dry=false           # dry-run/preview mode

#############

show_usage() {
    cat << EOF
Usage: $0 [COMMAND] [OPTIONS]

COMMANDS:
    install         Link defaults (with backups of extant, hardlinks to $backup_dir)
    uninstall       Remove all dotfiles symlinks
    load            Any non-extant symlinks are created.
    clean           Remove broken symlinks, if any
    backup          Make a backup to $backup_dir of all configuration files.

OPTIONS:
    -n, --dry-run       Prints but no commands

EXAMPLES:
    $0 install       # install with backups
    $0 load          # only create symlinks if not present
    $0 uninstall     # remove symlinks only
    $0 install -n    # dry run installation
EOF
}

# user input

parse_args() {
    local command="install"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            install|uninstall|load|backup|clean)
                command="$1"
                ;;
            -n|--dry-run)
                dry=true
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                echo "unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done
    
    action="$command" 
}

# action is command (line input)
parse_args "$@"

[ "$dry" = true ] && prefix="[Dry Run] " || prefix=""

echo "${prefix} Performing $action..."

##########
# step 1 #
##########

# cross-platform programs
# git, zsh, tmux, vim, vscode

# note: 
# zsh is really shell, which is
# .profile
# .zprofile
# .zshrc
# .aliases

 # key: dotfile config => value: configuration file
declare -A programs=( 
    ["git/.gitconfig"]="$HOME/.gitconfig" 
    ["zsh/.zshrc"]="$HOME/.zshrc" 
    ["zsh/.zprofile"]="$HOME/.zprofile" 
    ["misc/.profile"]="$HOME/.profile" 
    ["misc/.aliases"]="$HOME/.aliases" 
    ["tmux/.tmux.conf"]="$HOME/.tmux.conf" 
    ["vim/.vimrc"]="$HOME/.vimrc" 
    ["vim/init.vim"]="$config_dir/nvim/init.vim" 
    ["codium/vscodium_settings.json"]="$config_dir/VSCodium/User/settings.json" 
)

### FIXME codium on mac defaults to different configuration directory

##########
# step 2 #
##########

# determine the os which determines which applications to install

if [[ "$OSTYPE" == "darwin"* ]]; then
    # we are on mac

    # programs to load
    # skhd, wezterm

    declare -A macPrograms=( 
        ["skhd/skhdrc"]="$config_dir/skhd/skhdrc" 
        ["wezterm/.wezterm.lua"]="$HOME/.wezterm.lua" 
    )

    for key in "${!macPrograms[@]}"; do
        programs["$key"]="${macPrograms[$key]}"
    done

elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # we are on linux

    # programs to load,
    # picom, polybar, rofi, sxhkd, X11 (urxvt), bspwm
    
    declare -A linuxPrograms=(
        ["picom/picom.conf"]="$config_dir/picom.conf"
        ["polybar/config.ini"]="$config_dir/polybar/config.ini"
        ["rofi/config.rasi"]="$config_dir/rofi/config.rasi"
        ["rofi/theme.rasi"]="$config_dir/rofi/theme.rasi"
        ["sxhkd/sxhkdrc"]="$config_dir/sxhkd/sxhkdrc"
        ["urxvt/.Xresources"]="$config_dir/sxhkd/sxhkdrc"
        ["bspwm/bspwmrc"]="$config_dir/bspwm/bspwmrc"
    )
        
    for key in "${!linuxPrograms[@]}"; do
        programs["$key"]="${linuxPrograms[$key]}"
    done

fi
# one day we will have openbsd here too...

##########
# step 3 #
##########

mak_bak() {
    #make backup

    local ts=$(date +%s)                            # timestamp
    local filename=$(basename "$1")                 # filename
    local backup_path="$backup_dir/$ts/$filename.bak"    # backup destination

    if [ "$dry" != true ]; then
        mkdir -p "$(dirname "$backup_path")"
        mv "$1" "$backup_path"
    fi
    echo "${prefix} Backed up $1 to $backup_path"
}


create_sym() {
    # given a source and destination
    # make a symlink if it doesn't already exist

    local src="$1"
    local dest="$2"
    local backup="$3"

    if [ -L "$dest" ]; then
        echo "${prefix} Skipping $dest, already a symlink."
    else
        if [ -e "$dest" ]; then
            if [ "$backup" == true ]; then
                mak_bak "$dest"
            else
                echo "${prefix} Skipping $dest, already exists."
            fi
        else
            [ "$dry" != true ] &&  mkdir -p "$(dirname "$dest")"
        
            if [ "$dry" != true ]; then
                ln -s "$src" "$dest" || { echo "Failed to create symlink: $dest"; exit 1; }
            fi
            echo "${prefix} Created symlink: $dest -> $src"
        fi
    fi
}

uninstall_syms() {
    for key in "${!programs[@]}"; do
        local dest="${programs[$key]}"
        if [ -L "$dest" ]; then
            echo "${prefix} Removing symlink: $dest"
            [ "$dry" != true ] && rm "$dest"
        fi
    done
}

clean_broken_syms() {
    for key in "${!programs[@]}"; do
        local dest="${programs[$key]}"
        if [ -L "$dest" ] && [ ! -e "$dest" ]; then
            echo "${prefix} Removing symlink: $dest"
            [ "$dry" != true ] && rm "$dest"
        fi
    done
}

backup_all() {
    for key in "${!programs[@]}"; do
       mak_bak "${programs[$key]}"
    done
}

install_syms() {
    local backup="$1"

    for key in "${!programs[@]}"; do

        local prog="${key%%/*}"

        if [[ "$prog" != "misc" ]]; then
            if ! which "$prog" &>/dev/null; then
                echo "--- Skipping $key (requires '$prog' not found in PATH)"
                continue
            fi
        fi

        create_sym "$PWD/$key" "${programs[$key]}" "$backup"
    done
}

case "$action" in
    install)
        install_syms true
        ;;
    load)
        install_syms false
        ;;
    uninstall)
        uninstall_syms
        ;;
    clean)
        clean_broken_syms
        ;;
    backup)
        backup_all
        ;;
    *)
        exit 1
        ;;
esac
